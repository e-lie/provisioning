apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations: {}
  labels:
    name: grafana
  name: grafana
  namespace: kubeprod
spec:
  replicas: 1
  selector:
    matchLabels:
      name: grafana
  serviceName: grafana
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "3000"
        prometheus.io/scrape: "true"
      labels:
        name: grafana
    spec:
      containers:
      - args: []
        env:
        - name: GF_AUTH_PROXY_AUTO_SIGN_UP
          value: "true"
        - name: GF_AUTH_PROXY_ENABLED
          value: "true"
        - name: GF_AUTH_PROXY_HEADERS
          value: Email:X-Auth-Request-Email
        - name: GF_AUTH_PROXY_HEADER_NAME
          value: X-Auth-Request-User
        - name: GF_AUTH_PROXY_HEADER_PROPERTY
          value: username
        - name: GF_EXPLORE_ENABLED
          value: "true"
        - name: GF_INSTALL_PLUGINS
          value: ""
        - name: GF_LOG_LEVEL
          value: warn
        - name: GF_LOG_MODE
          value: console
        - name: GF_METRICS_ENABLED
          value: "true"
        - name: GF_SERVER_DOMAIN
          value: grafana.hosteaching.ovh
        - name: GF_SERVER_PROTOCOL
          value: http
        - name: GF_SERVER_ROOT_URL
          value: https://grafana.hosteaching.ovh
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        - name: GF_USERS_AUTO_ASSIGN_ORG
          value: "true"
        - name: GF_USERS_AUTO_ASSIGN_ORG_ROLE
          value: Admin
        image: bitnami/grafana:7.0.6-debian-10-r3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          initialDelaySeconds: 60
          successThreshold: 1
          tcpSocket:
            port: dashboard
        name: grafana
        ports:
        - containerPort: 3000
          name: dashboard
        readinessProbe:
          initialDelaySeconds: 30
          successThreshold: 2
          tcpSocket:
            port: dashboard
        resources:
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 100Mi
        stdin: false
        tty: false
        volumeMounts:
        - mountPath: /opt/bitnami/grafana/conf/provisioning/dashboards/dashboards_provider.yml
          name: dashboards-provider
          readOnly: true
          subPath: dashboards_provider.yml
        - mountPath: /opt/bitnami/grafana/data
          name: datadir
        - mountPath: /opt/bitnami/grafana/conf/provisioning/datasources/bkpr.yml
          name: datasources
          readOnly: true
          subPath: bkpr.yml
        - mountPath: /opt/bitnami/grafana/conf/provisioning/dashboards/kubernetes
          name: kubernetes-dashboards
          readOnly: true
      imagePullSecrets: []
      initContainers: []
      securityContext:
        fsGroup: 1001
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          name: grafana-dashboards-configuration-b7cab55
        name: dashboards-provider
      - configMap:
          name: grafana-datasource-configuration-30ac8c3
        name: datasources
      - configMap:
          name: grafana-kubernetes-dashboards-5bbac4b
        name: kubernetes-dashboards
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      labels:
        name: datadir
      name: datadir
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: "rook-cephfs"
      resources:
        requests:
          storage: 1Gi
